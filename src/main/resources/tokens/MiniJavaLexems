SEMI         : ';';
PACKAGE      : 'package';
IMPORT       : 'import';
DOT          : '.';
STAR         : '*';
CLASS        : 'class';
IMPLEMENTS   : 'implements';
PUBLIC       : 'public';
PROTECTED    : 'protected';
PRIVATE      : 'private';
ABSTRACT     : 'abstract';
STATIC       : 'static';
FINAL        : 'final';
STRICTFP     : 'strictfp';
COMMA        : ',';
LBRACE       : '{';
RBRACE       : '}';
LBRACKET     : '[';
RBRACKET     : ']';
LPAREN       : '(';
RPAREN       : ')';
VOID         : 'void';
INTERFACE    : 'interface';
THROW        : 'throw';
THROWS       : 'throws';
EQ           : '=';
NATIVE       : 'native';
SYNCHRONIZED : 'synchronized';
TRANSIENT    : 'transient';
VOLATILE     : 'volatile';
BOOLEAN      : 'boolean';
CHAR         : 'char';
BYTE         : 'byte';
SHORT        : 'short';
INT          : 'int';
LONG         : 'long';
FLOAT        : 'float';
DOUBLE       : 'double';
QUES         : '?';
EXTENDS      : 'extends';
ELLIPSIS     : '...';
THIS         : 'this';
SUPER        : 'super';
NULL         : 'null';
AT           : '@';
DEFAULT      : 'default';
REF          : '::';
COLON        : ':';
IF           : 'if';
ELSE         : 'else';
FOR          : 'for';
WHILE        : 'while';
DO           : 'do';
TRY          : 'try';
FINALLY      : 'finally';
SWITCH       : 'switch';
RETURN       : 'return';
BREAK        : 'break';
CONTINUE     : 'continue';
CATCH        : 'catch';
CASE         : 'case';
ENUM         : 'enum';
ASSERT       : 'assert';
LAMBDA       : '->';
PLUSPLUS     : '++';
SUBSUB       : '--';
TILDE        : '~';
BANG         : '!';
NEW          : 'new';
SLASH        : '/';
PERCENT      : '%';
PLUS         : '+';
SUB          : '-';
EQEQ         : '==';
BANGEQ       : '!=';
AMP          : '&';
CARET        : '^';
BAR          : '|';
AMPAMP       : '&&';
BARBAR       : '||';
CARETEQ      : '^=';
PLUSEQ       : '+=';
SUBEQ        : '-=';
STAREQ       : '*=';
SLASHEQ      : '/=';
AMPEQ        : '&=';
BAREQ        : '|=';
PERCENTEQ    : '%=';
GT           : '>';
LT           : '<';
INSTANCEOF   : 'instanceof';
CONST        : 'const';
GOTO         : 'goto';

BOOLEAN_LITERAL     : '(true|false)';
INTEGER_LITERAL     : '\\d+';
IDENTIFIER          : '\\b_*[a-zA-Z][_a-zA-Z0-9]*\\b';
